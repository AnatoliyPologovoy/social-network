{"version":3,"file":"static/js/891.7050084d.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/profile.module.css?d84e","webpack://samurai-way/./src/components/Profile/PersonData/personData.module.css?cbf1","components/Profile/PersonData/ProfileStatus.tsx","components/Profile/PersonData/PersonData.tsx","webpack://samurai-way/./src/components/Profile/Posts/Posts.module.css?138f","components/Profile/Posts/Posts.tsx","webpack://samurai-way/./src/components/Profile/AddPost/addpost.module.css?8343","components/Profile/AddPost/AddPost.tsx","components/Profile/Profile.tsx","components/Profile/ProfileAPIContainer.tsx","components/Profile/profile.selectors.ts","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"main_img\":\"profile_main_img__oNzne\"};","// extracted by mini-css-extract-plugin\nexport default {\"personData\":\"personData_personData__gJuQj\",\"imgAvatar\":\"personData_imgAvatar__cW7e5\",\"name\":\"personData_name__2+MXu\",\"age\":\"personData_age__diWIX\",\"nameWrapper\":\"personData_nameWrapper__-YAj8\",\"status\":\"personData_status__vizca\"};","import React, {ChangeEvent, JSXElementConstructor} from \"react\";\r\nimport cl from \"./personData.module.css\"\r\n\r\ntype StatusPropsType = {\r\n    status: string\r\n}\r\n\r\nexport class ProfileStatus extends React.Component<StatusPropsType, any> {\r\n    state = {\r\n        isEditMode: false,\r\n        input: this.props.status\r\n    }\r\n\r\n    toggleMode() {\r\n        this.setState({\r\n            isEditMode: !this.state.isEditMode,\r\n        })\r\n    }\r\n\r\n    changeInput (e: ChangeEvent<HTMLInputElement>) {\r\n        this.setState({\r\n            input: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<StatusPropsType>, prevState: Readonly<any>,) {\r\n\r\n        if (this.props.status !== prevProps.status)\r\n        this.setState({\r\n            input: this.props.status\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const toggleModeCB = this.toggleMode.bind(this)\r\n        const onChangeInputCB = this.changeInput.bind(this)\r\n        const viewStatus = <span onDoubleClick={toggleModeCB}>{this.state.input}</span>\r\n        const changeStatus =\r\n            <input\r\n                onChange={onChangeInputCB}\r\n                onBlur={toggleModeCB}\r\n                type={'text'}\r\n                value={this.state.input}\r\n                autoFocus\r\n            />\r\n        const renderStatus = this.state.isEditMode ? changeStatus : viewStatus\r\n        return (\r\n            <div className={cl.status}>\r\n                {renderStatus}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport cl from \"./personData.module.css\"\r\nimport {CurrentProfileDomainType, PersonDataType} from \"../../../redux/profileReducer\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\n\r\n\r\ntype PersonDataPropsType = {\r\n    data: PersonDataType,\r\n    currentProfile: CurrentProfileDomainType,\r\n    profileStatus: string\r\n}\r\n\r\n\r\nexport const PersonData: React.FC<PersonDataPropsType> = (props) => {\r\n    // const isCurrentProfile = !!props.currentProfile\r\n    const srcImg = props.currentProfile?.photos?.large ?\r\n        props.currentProfile.photos.large : props.data.avatar\r\n\r\n    const fullName = props.currentProfile ? props.currentProfile.fullName : props.data.name\r\n    return (\r\n        <div className={cl.personData}>\r\n            <img\r\n                className={cl.imgAvatar}\r\n                src={srcImg}\r\n                alt={\"аватарка пользователя \" + props.data.name}/>\r\n            <div className={cl.nameWrapper}>\r\n                <h2 className={cl.name}>{fullName}</h2>\r\n                <ProfileStatus status={props.profileStatus}/>\r\n            </div>\r\n            {/*<p className={cl.age}> {props.data.age}</p>*/}\r\n        </div>\r\n    )\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsList\":\"Posts_postsList__O5zqs\",\"post_item_avatar\":\"Posts_post_item_avatar__MMh25\",\"form_post_message\":\"Posts_form_post_message__SoqNp\"};","import React from \"react\";\r\nimport cl from \"./Posts.module.css\";\r\nimport {PostItemType, PostsType} from \"redux/profileReducer\";\r\n\r\n\r\ntype PostsPropsType = {\r\n    postsData: PostsType\r\n}\r\n\r\nexport const Posts: React.FC<PostsPropsType> = (props) => {\r\n\r\n    const renderPostItem = props.postsData.map((curr:PostItemType) => {\r\n        return (\r\n            <li key={curr.id.toString()}>\r\n                <img src=\"https://shapka-youtube.ru/wp-content/uploads/2021/02/avatarka-dlya-skaypa-dlya-parney.jpg\"\r\n                     alt=\"аватарка с котом в очках\" className={cl.post_item_avatar}/>\r\n                <p>{curr.text}</p>\r\n                <span>{curr.likes} likes</span>\r\n            </li>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <ul className={cl.postsList}>\r\n            {renderPostItem}\r\n        </ul>\r\n    )\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"addpost_wrapper__Ck6Tc\",\"textarea\":\"addpost_textarea__enE5M\",\"btnSend\":\"addpost_btnSend__JSAZq\"};","import React from 'react';\r\nimport cl from './addpost.module.css'\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"utils/validate\";\r\nimport {CustomInput} from \"components/common/CustomInput\";\r\n\r\ntype addPostPropsType = {\r\n    cbAddPost: (post: string) => void\r\n}\r\n\r\nexport const AddPost: React.FC<addPostPropsType> = (props) => {\r\n\r\n    const addPost = (formData: any) => {\r\n        props.cbAddPost(formData.post)\r\n\r\n    }\r\n\r\n    return (\r\n        <AddPostReduxForm onSubmit={addPost}/>\r\n    );\r\n};\r\n//validate\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddPostForm = (props: {handleSubmit: any}) => {\r\n    return (\r\n        <form\r\n            onSubmit={props.handleSubmit}\r\n            className={cl.wrapper}\r\n        >\r\n            <Field\r\n                validate={[required, maxLength50]}\r\n                name={'post'}\r\n                className={cl.textarea}\r\n                component={CustomInput}\r\n                tag={'textarea'}\r\n            />\r\n            <button className={cl.btnSend}>\r\n                Add post\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddPostReduxForm = reduxForm({\r\n    form: 'profileAddPost'\r\n})(AddPostForm)","import React from 'react';\r\nimport cl from \"./profile.module.css\";\r\nimport {PersonData} from \"./PersonData/PersonData\";\r\nimport {Posts} from \"./Posts/Posts\";\r\nimport {ProfilePageType} from \"redux/profileReducer\";\r\nimport {AddPost} from \"./AddPost/AddPost\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    cbAddPost: (post: string) => void\r\n    profilePage: ProfilePageType\r\n    // currentProfile: CurrentProfileDomainType\r\n}\r\n\r\nconst Profile: React.FC <ProfilePropsType> = (props) => {\r\n    const srcImg = props.profilePage.personData.mainImg\r\n    const personData = props.profilePage.personData\r\n    const postsData = props.profilePage.postsData\r\n    const profileStatus = props.profilePage.status\r\n    const currentProfile = props.profilePage.currentProfile\r\n\r\n    return (\r\n        <div>\r\n            <div className={cl.profile}>\r\n                <img\r\n                    src={srcImg}\r\n                    alt={'#'}\r\n                />\r\n                <PersonData\r\n                    data={personData}\r\n                    currentProfile={currentProfile}\r\n                    profileStatus={profileStatus}\r\n                />\r\n                <AddPost cbAddPost={props.cbAddPost}\r\n                />\r\n                <Posts postsData={postsData}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {CurrentProfileDomainType, ProfilePageType} from \"redux/profileReducer\";\r\nimport {Redirect, RouteComponentProps} from \"react-router-dom\";\r\nimport {AuthUserDataType} from \"redux/authReducer\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    cbAddPost: (post: string) => void\r\n    profilePage: ProfilePageType\r\n    authData: AuthUserDataType\r\n    // currentProfile: CurrentProfileDomainType\r\n    setUserProfile: (userId: string) => void\r\n    setProfileStatus: (userId: string) => void\r\n} & RouteComponentProps<{ userId: string }>\r\n\r\nexport class ProfileAPIContainer extends React.Component<ProfilePropsType, any> {\r\n\r\n    componentDidMount() {\r\n        const userId = this.props.match.params.userId\r\n        const ownUserId = this.props.authData.id && this.props.authData.id.toString()\r\n        const currentUserId = userId || ownUserId\r\n\r\n        if (currentUserId) {\r\n            this.props.setUserProfile(currentUserId)\r\n            this.props.setProfileStatus(currentUserId)\r\n        }\r\n        else {\r\n            return <Redirect to={'/login'}/>\r\n        }\r\n    }\r\n\r\n    //применить profileAPI.updateProfileStatus(status) для обновления статуса\r\n    // обновить можно только свой статус\r\n    // state.auth.data.id === profilePage.currentProfile.userId\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile {...this.props}/>\r\n        )\r\n    }\r\n}","import {AppStateType} from \"redux/redux-store\";\r\n\r\nexport const getProfilePage = (state: AppStateType) => {\r\n\t\treturn state.profilePage\r\n}\r\n\r\nexport const getAuthData = (state: AppStateType) => {\r\n\t\treturn state.auth.data\r\n}","import React from \"react\";\r\nimport {addPostActionCreation, ProfilePageType, setProfileStatusTC, setUserProfileTC} from \"../../redux/profileReducer\";\r\nimport {AppStateType} from \"redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {ProfileAPIContainer} from \"./ProfileAPIContainer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../HOC/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AuthUserDataType} from \"redux/authReducer\";\r\nimport {getAuthData, getProfilePage} from \"components/Profile/profile.selectors\";\r\n\r\n\r\ntype MapStateToProps = {\r\n    profilePage: ProfilePageType\r\n    authData: AuthUserDataType\r\n    // currentProfile: CurrentProfileDomainType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    cbAddPost: (post: string) => void\r\n    setUserProfile: (userId: string) => void\r\n    setProfileStatus: (userId: string) => void\r\n}\r\n\r\n\r\nconst objForMapDispatchToProps: MapDispatchToPropsType = {\r\n    cbAddPost: addPostActionCreation,\r\n    setUserProfile: setUserProfileTC,\r\n    setProfileStatus: setProfileStatusTC\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        profilePage: getProfilePage(state),\r\n        authData: getAuthData(state)\r\n        // currentProfile: state.profilePage.currentProfile,\r\n    }\r\n}\r\n\r\n\r\nconst ProfileContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, objForMapDispatchToProps),\r\n    withRouter,\r\n    WithAuthRedirect\r\n)(ProfileAPIContainer)\r\n\r\nexport default ProfileContainer\r\n\r\n"],"names":["ProfileStatus","state","isEditMode","input","props","status","this","setState","e","currentTarget","value","prevProps","prevState","toggleModeCB","toggleMode","bind","onChangeInputCB","changeInput","viewStatus","onDoubleClick","changeStatus","onChange","onBlur","type","autoFocus","renderStatus","className","cl","React","PersonData","srcImg","currentProfile","photos","large","data","avatar","fullName","name","src","alt","profileStatus","Posts","renderPostItem","postsData","map","curr","text","likes","id","toString","AddPost","AddPostReduxForm","onSubmit","formData","cbAddPost","post","maxLength50","maxLengthCreator","reduxForm","form","handleSubmit","Field","validate","required","component","CustomInput","tag","profilePage","personData","mainImg","ProfileAPIContainer","userId","match","params","ownUserId","authData","currentUserId","to","setUserProfile","setProfileStatus","getProfilePage","getAuthData","auth","objForMapDispatchToProps","addPostActionCreation","setUserProfileTC","setProfileStatusTC","compose","connect","withRouter","WithAuthRedirect"],"sourceRoot":""}